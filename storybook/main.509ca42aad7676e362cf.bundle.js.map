{"version":3,"file":"main.509ca42aad7676e362cf.bundle.js","sources":["webpack:///./src/components/ButtonRow/index.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst areAnyButtonsFullWidth = (buttons) => {\n  let includesFullWidth = false;\n\n  buttons.map((button) => {\n    if (button.props && button.props.width === 'full') {\n      includesFullWidth = true;\n    }\n  });\n\n  return includesFullWidth;\n};\n\nconst ButtonRowSide = (side, buttons, testSection) => {\n  const includesFullWidthButton = areAnyButtonsFullWidth(buttons);\n  const wrapperClassNames = classNames({\n    'flex': includesFullWidthButton,\n    'flex--1': true,\n    [`oui-button-row--${side}`]: side,\n  });\n\n  return (\n    <div\n      data-oui-component={ true }\n      className={ wrapperClassNames }\n      data-test-section={ testSection ? testSection + '-' + side : null }>\n      { buttons.map((button, index) => {\n        if (includesFullWidthButton) {\n          // `ButtonRow` groups that contain a full width `Button` must wrap\n          // the buttons in `div`'s of equal spacing.\n          const containerClasses = classNames({\n            'push-half--right': index !== (buttons.length - 1),\n            'push-half--left': index !== 0,\n            'flex--1': true,\n          });\n\n          return (\n            <div\n              className={ containerClasses }\n              key={ index }>\n              { button }\n            </div>\n          );\n        }\n        return button;\n      }) }\n    </div>\n  );\n};\n\n/**\n * A horizontal list of buttons with space between them.\n * @param {Object} props - Properties passed to component\n * @returns {ReactElement}\n */\nconst ButtonRow = ({\n  centerGroup,\n  leftGroup,\n  rightGroup,\n  testSection,\n}) => {\n  return (\n    <div\n      data-oui-component={ true }\n      className='oui-button-row flex'\n      data-test-section={ testSection }>\n      { leftGroup ? ButtonRowSide('left', leftGroup, testSection) : null }\n      { centerGroup ? ButtonRowSide('center', centerGroup, testSection) : null }\n      { rightGroup ? ButtonRowSide('right', rightGroup, testSection) : null }\n    </div>\n  );\n};\n\nButtonRow.propTypes = {\n  /** Array of buttons for the center */\n  centerGroup: PropTypes.arrayOf(PropTypes.element),\n  /** Array of buttons for left side */\n  leftGroup: PropTypes.arrayOf(PropTypes.element),\n  /** Array of buttons for right side */\n  rightGroup: PropTypes.arrayOf(PropTypes.element),\n  /** Hook for automated JavaScript tests */\n  testSection: PropTypes.string,\n};\n\nexport default ButtonRow;\n"],"mappings":"AAAA","sourceRoot":""}